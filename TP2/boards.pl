:-use_module(library(lists)).
:-use_module(library(between)).

board_2x2([
    cell(1, 1, 2),
    cell(1, 2, 2),
    cell(2, 1, 1),
    cell(2, 2, 1)
]).

board_2x2_invalid([
    cell(1, 1, 7),
    cell(1, 2, 6),
    cell(2, 1, 6),
    cell(2, 2, 6)
]).

board_4x4([
        cell(1, 1, 4),
        cell(1, 2, 6),
        cell(1, 3, 6),
        cell(1, 4, 5),

        cell(2, 1, 5),
        cell(2, 2, 2),
        cell(2, 3, 6),
        cell(2, 4, 4),

        cell(3, 1, 4),
        cell(3, 2, 6),
        cell(3, 3, 6),
        cell(3, 4, 6),

        cell(4, 1, 4),
        cell(4, 2, 6),
        cell(4, 3, 6),
        cell(4, 4, 4)
    ]).

board_5x5([
        cell(1,1,3),
        cell(1,2,3),
        cell(1,3,2),
        cell(1,4,5),
        cell(1,5,4),

        cell(2,1,5),
        cell(2,2,3),
        cell(2,3,5),
        cell(2,4,3),
        cell(2,5,5),

        cell(3,1,5),
        cell(3,2,6),
        cell(3,3,2),
        cell(3,4,4),
        cell(3,5,6),

        cell(4,1,5),
        cell(4,2,2),
        cell(4,3,2),
        cell(4,4,2),
        cell(4,5,4),

        cell(5,1,4),
        cell(5,2,5),
        cell(5,3,4),
        cell(5,4,3),
        cell(5,5,2)
    ]).

board_10x10([
        cell(1,1,4),
        cell(1,2,5),
        cell(1,3,6),
        cell(1,4,4),
        cell(1,5,4),
        cell(1,6,6),
        cell(1,7,5),
        cell(1,8,6),
        cell(1,9,5),
        cell(1,10,4),

        cell(2,1,6),
        cell(2,2,4),
        cell(2,3,4),
        cell(2,4,5),
        cell(2,5,6),
        cell(2,6,3),
        cell(2,7,6),
        cell(2,8,5),
        cell(2,9,4),
        cell(2,10,6),

        cell(3,1,7),
        cell(3,2,3),
        cell(3,3,2),
        cell(3,4,6),
        cell(3,5,5),
        cell(3,6,5),
        cell(3,7,4),
        cell(3,8,4),
        cell(3,9,7),
        cell(3,10,5),

        cell(4,1,5),
        cell(4,2,5),
        cell(4,3,4),
        cell(4,4,4),
        cell(4,5,4),
        cell(4,6,3),
        cell(4,7,3),
        cell(4,8,5),
        cell(4,9,6),
        cell(4,10,5),

        cell(5,1,5),
        cell(5,2,3),
        cell(5,3,4),
        cell(5,4,4),
        cell(5,5,5),
        cell(5,6,2),
        cell(5,7,5),
        cell(5,8,4),
        cell(5,9,4),
        cell(5,10,6),

        cell(6,1,5),
        cell(6,2,4),
        cell(6,3,3),
        cell(6,4,6),
        cell(6,5,2),
        cell(6,6,4),
        cell(6,7,3),
        cell(6,8,5),
        cell(6,9,5),
        cell(6,10,4),

        cell(7,1,6),
        cell(7,2,3),
        cell(7,3,4),
        cell(7,4,4),
        cell(7,5,6),
        cell(7,6,3),
        cell(7,7,1),
        cell(7,8,4),
        cell(7,9,4),
        cell(7,10,2),

        cell(8,1,5),
        cell(8,2,5),
        cell(8,3,2),
        cell(8,4,5),
        cell(8,5,6),
        cell(8,6,4),
        cell(8,7,4),
        cell(8,8,5),
        cell(8,9,4),
        cell(8,10,3),

        cell(9,1,5),
        cell(9,2,4),
        cell(9,3,5),
        cell(9,4,4),
        cell(9,5,4),
        cell(9,6,6),
        cell(9,7,6),
        cell(9,8,7),
        cell(9,9,4),
        cell(9,10,5),

        cell(10,1,4),
        cell(10,2,5),
        cell(10,3,5),
        cell(10,4,4),
        cell(10,5,4),
        cell(10,6,5),
        cell(10,7,5),
        cell(10,8,3),
        cell(10,9,4),
        cell(10,10,4)
    ]).

    board_hard(
            [cell(1,1,3),
            cell(1,2,4),
            cell(1,3,6),
            cell(1,4,5),
            cell(1,5,5),
            cell(1,6,5),
            cell(1,7,5),
            cell(1,8,5),
            cell(1,9,5),
            cell(1,10,4),
            cell(2,1,4),
            cell(2,2,2),
            cell(2,3,5),
            cell(2,4,2),
            cell(2,5,5),
            cell(2,6,4),
            cell(2,7,6),
            cell(2,8,5),
            cell(2,9,3),
            cell(2,10,5),
            cell(3,1,4),
            cell(3,2,3),
            cell(3,3,4),
            cell(3,4,4),
            cell(3,5,3),
            cell(3,6,6),
            cell(3,7,5),
            cell(3,8,3),
            cell(3,9,5),
            cell(3,10,5),
            cell(4,1,4),
            cell(4,2,4),
            cell(4,3,6),
            cell(4,4,4),
            cell(4,5,3),
            cell(4,6,3),
            cell(4,7,4),
            cell(4,8,5),
            cell(4,9,2),
            cell(4,10,6),
            cell(5,1,5),
            cell(5,2,4),
            cell(5,3,5),
            cell(5,4,4),
            cell(5,5,3),
            cell(5,6,3),
            cell(5,7,4),
            cell(5,8,5),
            cell(5,9,4),
            cell(5,10,5),
            cell(6,1,6),
            cell(6,2,4),
            cell(6,3,4),
            cell(6,4,4),
            cell(6,5,3),
            cell(6,6,5),
            cell(6,7,5),
            cell(6,8,3),
            cell(6,9,5),
            cell(6,10,5),
            cell(7,1,5),
            cell(7,2,5),
            cell(7,3,5),
            cell(7,4,3),
            cell(7,5,5),
            cell(7,6,5),
            cell(7,7,3),
            cell(7,8,3),
            cell(7,9,4),
            cell(7,10,6),
            cell(8,1,5),
            cell(8,2,5),
            cell(8,3,3),
            cell(8,4,6),
            cell(8,5,5),
            cell(8,6,6),
            cell(8,7,3),
            cell(8,8,3),
            cell(8,9,5),
            cell(8,10,4),
            cell(9,1,6),
            cell(9,2,4),
            cell(9,3,5),
            cell(9,4,4),
            cell(9,5,5),
            cell(9,6,6),
            cell(9,7,5),
            cell(9,8,5),
            cell(9,9,3),
            cell(9,10,5),
            cell(10,1,4),
            cell(10,2,4),
            cell(10,3,5),
            cell(10,4,4),
            cell(10,5,4),
            cell(10,6,6),
            cell(10,7,6),
            cell(10,8,5),
            cell(10,9,5),
            cell(10,10,3)]
        ).


getCell(Board, Row, Col, Content) :-
    member(cell(Row, Col, Content), Board).

varBoard(Board, Dim) :-
    findall(cell(R, C, _), (between(1, Dim, R), between(1, Dim, C)),  Board).